"""Tests for error formatting utilities.

Test Coverage:
- ErrorFormatter.not_found() - 7 tests
- ErrorFormatter.already_exists() - 3 tests
- ErrorFormatter.invalid_parameter() - 4 tests
- ErrorFormatter.missing_required_field() - 2 tests
- ErrorFormatter.invalid_combination() - 2 tests

Total: 18 test cases

Generated by chora-base template.
"""

{% raw -%}
import pytest
from {{ package_name }}.utils.errors import ErrorFormatter


class TestErrorFormatterNotFound:
    """Tests for ErrorFormatter.not_found() method."""

    def test_not_found_single_suggestion(self):
        """Test not found with one close match suggestion."""
        result = ErrorFormatter.not_found(
            entity_type="server",
            entity_id="githbu",
            available=["github", "gitlab", "gitea"],
        )

        assert "Server 'githbu' not found" in result
        assert "Did you mean 'github'?" in result

    def test_not_found_multiple_suggestions(self):
        """Test not found with multiple close matches."""
        result = ErrorFormatter.not_found(
            entity_type="command",
            entity_id="test",
            available=["test-unit", "test-integration", "tests", "build"],
            max_suggestions=2,
        )

        assert "Command 'test' not found" in result
        assert "Did you mean one of:" in result
        # Should suggest close matches
        assert any(word in result for word in ["test-unit", "test-integration", "tests"])

    def test_not_found_no_close_match_list_available(self):
        """Test not found with no close match, lists available."""
        result = ErrorFormatter.not_found(
            entity_type="tool",
            entity_id="xyz",
            available=["add", "remove", "list", "show"],
        )

        assert "Tool 'xyz' not found" in result
        assert "Available tools:" in result
        assert "add" in result
        assert "remove" in result

    def test_not_found_many_available_truncated(self):
        """Test that long available lists are truncated."""
        many_items = [f"item{i}" for i in range(10)]
        result = ErrorFormatter.not_found(
            entity_type="resource",
            entity_id="unknown",
            available=many_items,
        )

        assert "Resource 'unknown' not found" in result
        assert "Available resources:" in result
        assert "(and 5 more)" in result
        # Should show first 5
        assert "item0" in result
        assert "item4" in result
        # Should NOT show items beyond 5th
        assert "item9" not in result

    def test_not_found_empty_available(self):
        """Test not found with no available entities."""
        result = ErrorFormatter.not_found(
            entity_type="item",
            entity_id="test",
            available=[],
        )

        assert result == "Item 'test' not found."
        assert "Did you mean" not in result
        assert "Available" not in result

    def test_not_found_capitalizes_entity_type(self):
        """Test that entity_type is capitalized."""
        result = ErrorFormatter.not_found(
            entity_type="server",
            entity_id="test",
            available=["prod"],
        )

        assert result.startswith("Server")  # Capitalized

    def test_not_found_max_suggestions_limit(self):
        """Test that max_suggestions parameter limits results."""
        result = ErrorFormatter.not_found(
            entity_type="item",
            entity_id="test",
            available=["test1", "test2", "test3", "test4"],
            max_suggestions=2,
        )

        # Should only suggest up to 2 matches
        # Count single quotes to estimate number of suggestions
        if "Did you mean one of:" in result:
            # Extract suggestion part
            suggestion_part = result.split("Did you mean one of:")[1]
            # Count suggestions (each wrapped in single quotes)
            import re
            suggestions_found = re.findall(r"'([^']+)'", suggestion_part)
            assert len(suggestions_found) <= 2


class TestErrorFormatterAlreadyExists:
    """Tests for ErrorFormatter.already_exists() method."""

    def test_already_exists_basic(self):
        """Test basic already exists error."""
        result = ErrorFormatter.already_exists(
            entity_type="server",
            entity_id="production",
        )

        assert result == "Server 'production' already exists."

    def test_already_exists_with_existing_id(self):
        """Test already exists with existing ID reference."""
        result = ErrorFormatter.already_exists(
            entity_type="user",
            entity_id="alice",
            existing_id="user_123",
        )

        assert "User 'alice' already exists" in result
        assert "(ID: user_123)" in result

    def test_already_exists_capitalizes(self):
        """Test that entity_type is capitalized."""
        result = ErrorFormatter.already_exists(
            entity_type="resource",
            entity_id="test",
        )

        assert result.startswith("Resource")


class TestErrorFormatterInvalidParameter:
    """Tests for ErrorFormatter.invalid_parameter() method."""

    def test_invalid_parameter_basic(self):
        """Test basic invalid parameter error."""
        result = ErrorFormatter.invalid_parameter(
            param_name="port",
            value="8080",
            expected="integer",
        )

        assert "Invalid parameter 'port'" in result
        assert "got str" in result
        assert "expected integer" in result

    def test_invalid_parameter_with_hint(self):
        """Test invalid parameter with hint."""
        result = ErrorFormatter.invalid_parameter(
            param_name="mode",
            value="fast",
            expected="one of: ['slow', 'medium']",
            hint="use 'medium' for better compatibility",
        )

        assert "Invalid parameter 'mode'" in result
        assert "Hint: use 'medium' for better compatibility" in result

    def test_invalid_parameter_complex_type(self):
        """Test invalid parameter with complex type."""
        result = ErrorFormatter.invalid_parameter(
            param_name="config",
            value={"name": "test"},
            expected="dict with 'name' and 'version' fields",
        )

        assert "Invalid parameter 'config'" in result
        assert "got dict" in result
        assert "expected dict with 'name' and 'version' fields" in result

    def test_invalid_parameter_type_detection(self):
        """Test that type detection works for various Python types."""
        # Test with list
        result = ErrorFormatter.invalid_parameter(
            param_name="items",
            value=[1, 2, 3],
            expected="dict",
        )
        assert "got list" in result

        # Test with int
        result = ErrorFormatter.invalid_parameter(
            param_name="name",
            value=123,
            expected="string",
        )
        assert "got int" in result

        # Test with None
        result = ErrorFormatter.invalid_parameter(
            param_name="data",
            value=None,
            expected="dict",
        )
        assert "got NoneType" in result


class TestErrorFormatterMissingRequiredField:
    """Tests for ErrorFormatter.missing_required_field() method."""

    def test_missing_required_field_default_container(self):
        """Test missing field with default container."""
        result = ErrorFormatter.missing_required_field(
            field_name="name",
        )

        assert result == "Missing required field 'name' in request"

    def test_missing_required_field_custom_container(self):
        """Test missing field with custom container."""
        result = ErrorFormatter.missing_required_field(
            field_name="api_key",
            container="configuration",
        )

        assert result == "Missing required field 'api_key' in configuration"


class TestErrorFormatterInvalidCombination:
    """Tests for ErrorFormatter.invalid_combination() method."""

    def test_invalid_combination_basic(self):
        """Test basic invalid combination error."""
        result = ErrorFormatter.invalid_combination(
            field1="use_cache",
            field2="force_refresh",
            reason="cannot use cache while forcing refresh",
        )

        assert "Invalid combination of 'use_cache' and 'force_refresh'" in result
        assert "cannot use cache while forcing refresh" in result

    def test_invalid_combination_mutual_exclusivity(self):
        """Test mutual exclusivity error."""
        result = ErrorFormatter.invalid_combination(
            field1="all",
            field2="ids",
            reason="specify either 'all' or specific IDs, not both",
        )

        assert "Invalid combination of 'all' and 'ids'" in result
        assert "specify either 'all' or specific IDs, not both" in result


class TestErrorFormatterIntegration:
    """Integration tests for realistic use cases."""

    def test_not_found_in_response_error(self):
        """Test using ErrorFormatter with Response.error()."""
        from {{ package_name }}.utils.responses import Response

        error_message = ErrorFormatter.not_found(
            entity_type="server",
            entity_id="tset",
            available=["test", "prod", "dev"],
        )

        result = Response.error(
            error_code="not_found",
            message=error_message,
            available=["test", "prod", "dev"],
        )

        assert result["status"] == "error"
        assert result["error_code"] == "not_found"
        assert "Did you mean 'test'?" in result["message"]
        assert result["details"]["available"] == ["test", "prod", "dev"]

    def test_validation_error_workflow(self):
        """Test typical validation error workflow."""
        # Simulate API validation
        required_fields = ["name", "type", "config"]
        provided_data = {"name": "test", "type": "server"}
        missing = [f for f in required_fields if f not in provided_data]

        assert missing == ["config"]

        error_message = ErrorFormatter.missing_required_field(
            field_name="config",
            container="request body",
        )

        assert "Missing required field 'config' in request body" == error_message

    def test_cli_command_suggestion_workflow(self):
        """Test CLI command typo suggestion."""
        commands = ["build", "test", "lint", "deploy", "clean"]
        user_input = "biuld"

        error_message = ErrorFormatter.not_found(
            entity_type="command",
            entity_id=user_input,
            available=commands,
        )

        assert "Command 'biuld' not found" in error_message
        assert "Did you mean 'build'?" in error_message

    def test_mcp_tool_not_found_workflow(self):
        """Test MCP tool not found with suggestions."""
        available_tools = [
            "add_server",
            "remove_server",
            "list_servers",
            "start_server",
        ]
        requested_tool = "add_sever"  # Typo

        error_message = ErrorFormatter.not_found(
            entity_type="tool",
            entity_id=requested_tool,
            available=available_tools,
        )

        assert "Tool 'add_sever' not found" in error_message
        assert "add_server" in error_message  # Should suggest correct spelling
{%- endraw %}
