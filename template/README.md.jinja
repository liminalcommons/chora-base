# {{ project_name }}

{{ project_description }}

## Overview

{% if project_type == 'mcp_server' -%}
**{{ project_name }}** is a Model Context Protocol (MCP) server that provides [describe your server's capabilities].

This project follows the MCP specification and can be integrated with:
- Claude Desktop
- Cursor
- Other MCP-compatible clients

{% elif project_type == 'library' -%}
**{{ project_name }}** is a Python library that [describe your library's purpose].

{% elif project_type == 'cli_tool' -%}
**{{ project_name }}** is a command-line tool that [describe what your tool does].

{% elif project_type == 'web_service' -%}
**{{ project_name }}** is a web service/API that [describe your service].

{% endif -%}

## Features

- **[Feature 1]** - Description
- **[Feature 2]** - Description
{% if include_memory_system -%}
- **Agent Memory System** - Cross-session learning with event log, knowledge graph, and trace correlation
{% endif -%}
{% if include_cli -%}
- **CLI Interface** - Command-line tools for [describe CLI purpose]
{% endif -%}
{% if include_tests -%}
- **Comprehensive Testing** - {{ test_coverage_threshold }}%+ test coverage with pytest
{% endif -%}

## Installation

### Quick Setup

```bash
# Clone repository
git clone https://github.com/{{ github_username }}/{{ project_slug }}.git
cd {{ project_slug }}

# One-command setup (installs dependencies, hooks, and runs checks)
./scripts/setup.sh
```

### Manual Setup

```bash
# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # or `.venv\Scripts\activate` on Windows

# Install with development dependencies
pip install -e ".[dev]"

{% if include_pre_commit -%}
# Install pre-commit hooks
pre-commit install
{% endif -%}
```

{% if include_justfile -%}
### Using Just (Recommended)

Install [just](https://github.com/casey/just) for easier task management:

```bash
# macOS
brew install just

# Other platforms: https://github.com/casey/just#installation
```

View available commands:
```bash
just --list
```
{% endif -%}

## Configuration

### Environment Variables

Create a `.env` file:

```env
# Application configuration
{{ package_name | upper }}_LOG_LEVEL=INFO

# Add your configuration here
```

{% if project_type == 'mcp_server' -%}
### Client Configuration

#### Claude Desktop (macOS)

**Development Mode (Editable Install):**
```json
{
  "mcpServers": {
    "{{ project_slug }}-dev": {
      "command": "/path/to/{{ project_slug }}/.venv/bin/python",
      "args": ["-m", "{{ package_name }}.server"],
      "cwd": "/path/to/{{ project_slug }}",
      "env": {
        "{{ package_name | upper }}_DEBUG": "1"
      }
    }
  }
}
```

**Production Mode (Installed Package):**
```json
{
  "mcpServers": {
    "{{ project_slug }}": {
      "command": "{{ project_slug }}",
      "args": [],
      "env": {}
    }
  }
}
```
{% endif -%}

{% if project_type == 'cli_tool' or include_cli -%}
## Usage

```bash
# Example command
{{ project_slug }} --help

# [Add your specific usage examples here]
```
{% endif -%}

## Development

{% if include_justfile -%}
### Using Just (Recommended)

```bash
# Show all available commands
just --list

# Run tests
just test

# Run quality checks
just check

# Run smoke tests
just smoke

# Clean build artifacts
just clean
```
{% endif -%}

### Manual Commands

```bash
{% if include_tests -%}
# Run tests
pytest

# Type checking
mypy src/{{ package_name }}

{% endif -%}
{% if include_pre_commit -%}
# Linting
ruff check src/{{ package_name }}
black --check src/{{ package_name }}

{% endif -%}
# Run application
{{ project_slug }}
```

## Documentation

**For Human Contributors:**
- **[README.md](README.md)** - This file (project overview)
{% if include_contributing -%}
- **[CONTRIBUTING.md](CONTRIBUTING.md)** - Contribution guidelines, code style, PR process
{% endif -%}
{% if include_development_docs -%}
- **[docs/DEVELOPMENT.md](docs/DEVELOPMENT.md)** - Developer deep dive, architecture, debugging
{% endif -%}
{% if include_troubleshooting -%}
- **[docs/TROUBLESHOOTING.md](docs/TROUBLESHOOTING.md)** - Common issues and solutions
{% endif -%}

{% if include_agents_md -%}
**For AI Coding Agents:**
- **[AGENTS.md](AGENTS.md)** - Machine-readable project instructions (OpenAI/Google/Sourcegraph standard)

{% endif -%}
## Project Principles

This project follows best practices for:

- **Code Quality** - Linting (ruff), formatting (black), type checking (mypy)
{% if include_tests -%}
- **Testing** - Comprehensive test suite with {{ test_coverage_threshold }}%+ coverage
{% endif -%}
- **Documentation** - Clear, up-to-date documentation following DiÃ¡taxis framework
{% if include_memory_system -%}
- **Agentic Coding** - Machine-readable instructions, stateful memory for AI agents
{% endif -%}

## License

{{ license }}{% if license == 'MIT' %} License - see [LICENSE](LICENSE){% elif license == 'Apache-2.0' %} - see [LICENSE](LICENSE){% elif license == 'GPL-3.0' %} - see [LICENSE](LICENSE){% elif license == 'BSD-3-Clause' %} - see [LICENSE](LICENSE){% endif %}

## Related Projects

- [chora-base](https://github.com/liminalcommons/chora-base) - Python project template
- [chora-composer](https://github.com/liminalcommons/chora-composer) - Configuration-driven artifact generation
- [chora-platform](https://github.com/liminalcommons/chora-platform) - Shared platform tooling

---

ðŸ¤– Generated with [chora-base](https://github.com/liminalcommons/chora-base) template
