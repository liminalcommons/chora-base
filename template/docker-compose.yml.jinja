# Docker Compose configuration for << project_name >>
# Orchestrates << project_type >> service<% if project_type == 'mcp_server' %> and dependencies<% endif %>
# Generated by chora-base template

version: "3.8"

services:
<% if project_type == 'mcp_server' -%>
  # << project_name >> MCP Server
  << project_slug >>:
    build:
      context: .
      dockerfile: Dockerfile
    image: << project_slug >>:latest
    container_name: << project_slug >>
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Environment-based configuration (pattern from chora-compose)
      - << package_name | upper >>_LOG_LEVEL=$<<'{'>><< package_name | upper >>_LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      # Uncomment for SSE/HTTP transport:
      # - MCP_TRANSPORT=sse
      # - MCP_SERVER_HOST=0.0.0.0
      # - MCP_SERVER_PORT=8000
    <% if include_memory_system -%>
    # Uncomment to expose MCP server via HTTP/SSE
    # ports:
    #   - "$<<'{'>>MCP_PORT:-8000}:8000"
    <% endif -%>
    volumes:
      # Three-tier volume strategy (pattern from chora-compose):
      # 1. Configs (read-mostly, hot-reload without rebuild)
      # - ./configs:/app/configs:ro

      # 2. Ephemeral (session data, survives restarts)
      # - ./ephemeral:/app/ephemeral

      # 3. Persistent (long-term artifacts and logs)
      - ./logs:/app/logs
      - ./data:/app/data
<% if include_memory_system -%>
      # Agent memory persistence
      - ./.chora/memory/events:/app/.chora/memory/events
      - ./.chora/memory/knowledge:/app/.chora/memory/knowledge
<% endif -%>
    networks:
      - << project_slug >>-network
    # Health check (import-based pattern from coda-mcp)
    healthcheck:
      test: ["CMD", "python", "-c", "import << package_name >>; assert << package_name >>.__version__"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Optional: n8n workflow orchestration (pattern from chora-compose)
  # Uncomment to enable n8n integration
  # n8n:
  #   image: n8nio/n8n:latest
  #   container_name: << project_slug >>-n8n
  #   restart: unless-stopped
  #   ports:
  #     - "5678:5678"
  #   env_file:
  #     - .env
  #   environment:
  #     - TZ=$<<'{'>>TZ:-UTC}
  #     - GENERIC_TIMEZONE=$<<'{'>>GENERIC_TIMEZONE:-UTC}
  #     # Enable MCP tool usage in AI Agent workflows
  #     - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
  #     # MCP server connection URL (if using SSE transport)
  #     - MCP_SERVER_URL=http://<< project_slug >>:8000/sse
  #   volumes:
  #     - ./n8n_data:/home/node/.n8n
  #   networks:
  #     - << project_slug >>-network
  #   depends_on:
  #     << project_slug >>:
  #       condition: service_healthy  # Wait for MCP server health (pattern from chora-compose)
  #   healthcheck:
  #     test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s

<% elif project_type == 'web_service' -%>
  # << project_name >> Web Service
  << project_slug >>:
    build:
      context: .
      dockerfile: Dockerfile
    image: << project_slug >>:latest
    container_name: << project_slug >>
    restart: unless-stopped
    ports:
      - "$<<'{'>>PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      # Environment-based configuration with sensible defaults
      - << package_name | upper >>_LOG_LEVEL=$<<'{'>><< package_name | upper >>_LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PORT=$<<'{'>>PORT:-8000}
    volumes:
      # Persist logs and data
      - ./logs:/app/logs
      # Uncomment for config hot-reload:
      # - ./configs:/app/configs:ro
    networks:
      - << project_slug >>-network
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Nginx reverse proxy
  # Uncomment to enable Nginx
  # nginx:
  #   image: nginx:alpine
  #   container_name: << project_slug >>-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - << project_slug >>-network
  #   depends_on:
  #     - << project_slug >>

<% elif project_type == 'cli_tool' -%>
  # << project_name >> CLI Tool
  << project_slug >>:
    build:
      context: .
      dockerfile: Dockerfile
    image: << project_slug >>:latest
    container_name: << project_slug >>
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount current directory for CLI access to local files
      - ./data:/app/data
    networks:
      - << project_slug >>-network
    # CLI tools don't run continuously
    # Override command when running: docker-compose run << project_slug >> <command>
    profiles:
      - cli

<% else -%>
  # << project_name >> (Library)
  << project_slug >>:
    build:
      context: .
      dockerfile: Dockerfile
    image: << project_slug >>:latest
    container_name: << project_slug >>
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - << project_slug >>-network
    # Override command for interactive Python REPL:
    # docker-compose run << project_slug >> python
    profiles:
      - dev

<% endif -%>
networks:
  << project_slug >>-network:
    driver: bridge
    name: << project_slug >>-network  # Explicit name for service discovery

volumes:
<% if project_type == 'mcp_server' -%>
  logs:
    driver: local
  data:
    driver: local
<% if include_memory_system -%>
  memory_events:
    driver: local
  memory_knowledge:
    driver: local
<% endif -%>
<% elif project_type == 'web_service' -%>
  logs:
    driver: local
<% endif -%>

# Usage instructions:
#
# Start services:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f << project_slug >>
#
# Stop services:
#   docker-compose down
#
# Rebuild and restart:
#   docker-compose up -d --build
#
<% if project_type == 'cli_tool' -%>
# Run CLI command:
#   docker-compose run --rm << project_slug >> <command>
#
<% endif -%>
# Remove all containers and volumes:
#   docker-compose down -v
