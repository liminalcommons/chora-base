# Multi-stage Dockerfile for << project_name >>
# Optimized for production deployment with security best practices
# Generated by chora-base template

# === Builder Stage ===
# Build wheel distribution to avoid import path conflicts
# Inspired by mcp-n8n and chora-compose production deployments
FROM python:<< python_version >>-slim as builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files first (better layer caching)
COPY pyproject.toml README.md ./

# Copy source code
COPY src/ ./src/

# Build wheel distribution (not editable install)
# This prevents Python path ambiguities and import conflicts
# Pattern from chora-compose: avoids "package vs module" namespace issues
RUN pip install --no-cache-dir --upgrade pip build && \
    python -m build --wheel --outdir /dist

# === Runtime Stage ===
# Minimal image with only runtime dependencies
FROM python:<< python_version >>-slim

# Set working directory
WORKDIR /app

# Install runtime system dependencies
<% if project_type == 'mcp_server' -%>
# MCP servers need git for version control integration
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*
<% elif project_type == 'web_service' -%>
# Web services need curl for health checks
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*
<% else -%>
# Minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*
<% endif -%>

# Create non-root user for security (UID 1000 for compatibility)
RUN useradd -m -u 1000 -s /bin/bash appuser && \
    chown -R appuser:appuser /app

# Install wheel from builder stage
# Pattern from mcp-n8n: cleaner than copying site-packages
COPY --from=builder /dist/*.whl /tmp/
RUN pip install --no-cache-dir /tmp/*.whl && \
    rm -rf /tmp/*.whl

# Copy application code (optional, already in wheel)
# Uncomment if you need source files at runtime
# COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser pyproject.toml README.md ./

<% if project_type == 'mcp_server' -%>
# Create directories for MCP server data
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appuser /app/logs /app/data

# Environment variables for MCP server
ENV << package_name | upper >>_LOG_LEVEL=INFO \
    << package_name | upper >>_LOG_FILE=/app/logs/<< project_slug >>.log \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Expose MCP server port (if using SSE/HTTP transport)
# EXPOSE 8000

# Health check for MCP server
# Import-based pattern from coda-mcp: validates Python env without CLI overhead
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import << package_name >>; assert << package_name >>.__version__" || exit 1

<% elif project_type == 'web_service' -%>
# Create directories for web service
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app/logs

# Environment variables for web service
ENV << package_name | upper >>_LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8000

# Expose web service port
EXPOSE 8000

# Health check for web service
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

<% else -%>
# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

<% endif -%>
# Switch to non-root user
USER appuser

<% if project_type == 'mcp_server' -%>
# Default command: Start MCP server
CMD ["<< project_slug >>"]

<% elif project_type == 'web_service' -%>
# Default command: Start web service
CMD ["<< project_slug >>"]

<% elif project_type == 'cli_tool' -%>
# Default command: Show help
CMD ["<< project_slug >>", "--help"]

<% else -%>
# Default command: Python REPL (for library projects)
CMD ["python"]

<% endif -%>
# === Build Instructions ===
#
# Standard build:
#   docker build -t << project_slug >>:latest .
#
# Multi-architecture build (amd64 + arm64):
#   docker buildx build --platform linux/amd64,linux/arm64 \
#     -t << project_slug >>:latest --load .
#
# With build cache (faster rebuilds):
#   docker build --cache-from << project_slug >>:latest \
#     -t << project_slug >>:latest .
#
# === Run Instructions ===
<% if project_type == 'mcp_server' -%>
#
# Run MCP server:
#   docker run -d --name << project_slug >> \
#     -v $(pwd)/logs:/app/logs \
#     -v $(pwd)/data:/app/data \
#     -v $(pwd)/.env:/app/.env:ro \
#     << project_slug >>:latest
#
# With agent memory (if enabled):
#   docker run -d --name << project_slug >> \
#     -v $(pwd)/.chora/memory:/app/.chora/memory \
#     -v $(pwd)/.env:/app/.env:ro \
#     << project_slug >>:latest
<% elif project_type == 'web_service' -%>
#
# Run web service:
#   docker run -d --name << project_slug >> \
#     -p 8000:8000 \
#     -v $(pwd)/.env:/app/.env:ro \
#     << project_slug >>:latest
#
# With health monitoring:
#   docker run -d --name << project_slug >> \
#     -p 8000:8000 \
#     --health-cmd "curl -f http://localhost:8000/health" \
#     << project_slug >>:latest
<% else -%>
#
# Run interactively:
#   docker run -it --rm << project_slug >>:latest
<% endif -%>
#
# === Debugging ===
#
# Interactive shell:
#   docker run -it --rm << project_slug >>:latest /bin/bash
#
# Check health status:
#   docker inspect --format='<<"<<">>.State.Health.Status<<">>">>' << project_slug >>
#
# View logs:
#   docker logs -f << project_slug >>
