# Multi-stage Dockerfile for {{ project_name }}
# Optimized for production deployment with security best practices
# Generated by chora-base template

# === Builder Stage ===
# Install dependencies and build bytecode in isolated environment
FROM python:{{ python_version }}-slim as builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files first (better layer caching)
COPY pyproject.toml README.md ./

# Copy source code
COPY src/ ./src/

# Install package in builder stage
# This creates the .venv with all dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e .

# === Runtime Stage ===
# Minimal image with only runtime dependencies
FROM python:{{ python_version }}-slim

# Set working directory
WORKDIR /app

# Install runtime system dependencies
{% if project_type == 'mcp_server' -%}
# MCP servers need git for version control integration
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    && rm -rf /var/lib/apt/lists/*
{% else -%}
# Minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*
{% endif -%}

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash appuser && \
    chown -R appuser:appuser /app

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python{{ python_version }}/site-packages /usr/local/lib/python{{ python_version }}/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser pyproject.toml README.md ./

{% if project_type == 'mcp_server' -%}
# Create directories for MCP server data
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appuser /app/logs /app/data

# Environment variables for MCP server
ENV {{ package_name | upper }}_LOG_LEVEL=INFO \
    {{ package_name | upper }}_LOG_FILE=/app/logs/{{ project_slug }}.log \
    PYTHONUNBUFFERED=1

# Expose MCP server port (if applicable)
# EXPOSE 8000

# Health check for MCP server
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD {{ project_slug }} --version || exit 1

{% elif project_type == 'web_service' -%}
# Create directories for web service
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app/logs

# Environment variables for web service
ENV {{ package_name | upper }}_LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1 \
    PORT=8000

# Expose web service port
EXPOSE 8000

# Health check for web service
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

{% else -%}
# Environment variables
ENV PYTHONUNBUFFERED=1

{% endif -%}
# Switch to non-root user
USER appuser

{% if project_type == 'mcp_server' -%}
# Default command: Start MCP server
CMD ["{{ project_slug }}"]

{% elif project_type == 'web_service' -%}
# Default command: Start web service
CMD ["{{ project_slug }}"]

{% elif project_type == 'cli_tool' -%}
# Default command: Show help
CMD ["{{ project_slug }}", "--help"]

{% else -%}
# Default command: Python REPL (for library projects)
CMD ["python"]

{% endif -%}
# Build instructions:
#   docker build -t {{ project_slug }}:latest .
#
# Run instructions:
{% if project_type == 'mcp_server' -%}
#   docker run -d --name {{ project_slug }} \
#     -v $(pwd)/logs:/app/logs \
#     -v $(pwd)/.env:/app/.env:ro \
#     {{ project_slug }}:latest
{% elif project_type == 'web_service' -%}
#   docker run -d --name {{ project_slug }} \
#     -p 8000:8000 \
#     -v $(pwd)/.env:/app/.env:ro \
#     {{ project_slug }}:latest
{% else -%}
#   docker run -it --rm {{ project_slug }}:latest
{% endif -%}
