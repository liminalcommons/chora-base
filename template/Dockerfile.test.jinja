# Test-focused Dockerfile for CI/CD
# Ensures isolated environment with correct package versions
# Solves CI issues where GitHub Actions may have system package conflicts
# Generated by chora-base template

FROM python:{{ python_version }}-slim

# Set working directory
WORKDIR /app

# Install system dependencies needed for testing
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
{% if project_type == 'web_service' -%}
    curl \
{% endif -%}
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files first (better layer caching)
COPY pyproject.toml README.md ./

# Copy source code
COPY src/ ./src/

# Install package with dev dependencies in isolated environment
# This ensures all dependencies from pyproject.toml are correctly installed
# (no system vs pip version conflicts)
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e ".[dev]"

{% if include_tests -%}
# Copy test files
COPY tests/ ./tests/

{% endif -%}
# Set environment variable to indicate we're in CI
ENV CI=true \
    PYTHONUNBUFFERED=1

{% if include_tests -%}
# Default command: Run full test suite with coverage
# Can be overridden in CI workflow or docker run command
CMD ["pytest", "tests/", "--cov=src/{{ package_name }}", "--cov-report=term", "--cov-fail-under={{ test_coverage_threshold }}", "-v"]
{% else -%}
# Default command: Run basic smoke tests
CMD ["python", "-c", "import {{ package_name }}; print('{{ package_name }} imported successfully')"]
{% endif -%}

# Build instructions:
#   docker build -t {{ project_slug }}:test -f Dockerfile.test .
#
# Run instructions:
#   docker run --rm {{ project_slug }}:test
#
# CI usage (GitHub Actions):
#   - name: Build test image
#     uses: docker/build-push-action@v5
#     with:
#       context: .
#       file: ./Dockerfile.test
#       tags: {{ project_slug }}:test
#       cache-from: type=gha
#       cache-to: type=gha,mode=max
#
#   - name: Run tests
#     run: docker run --rm {{ project_slug }}:test
