# {{ project_slug }} task automation
#
# This justfile provides the primary developer interface for this project.
# All development tasks are accessed via 'just <task>'.
#
# Quick start:
#   just --list     # Show all available commands
#   just help       # Show common workflows
#   just test       # Run test suite
#
# Installation: Automatically handled by ./scripts/setup.sh
# More info: https://github.com/casey/just

# Default recipe (show available commands)
default:
    @just --list

# Show help and common workflows
help:
    @echo "=== {{ project_slug }} - Development Commands ==="
    @echo ""
    @echo "Quick validation:"
    @echo "  just test           # Run test suite (~1 min)"
    @echo "  just smoke          # Quick smoke tests (~10 sec)"
    @echo "  just lint           # Check code style"
    @echo ""
    @echo "Before creating PR:"
    @echo "  just pre-merge      # Run all checks (required)"
    @echo ""
    @echo "Building & releasing:"
    @echo "  just build          # Build distribution packages"
    @echo "  just prepare patch  # Prepare patch release"
    @echo ""
    @echo "Full command list:"
    @just --list

# Install all dependencies (including dev)
install:
    pip install -e ".[dev]"

# Install pre-commit hooks
setup-hooks:
    pre-commit install

# Environment management
venv-create:
    ./scripts/venv-create.sh

venv-clean:
    ./scripts/venv-clean.sh

check-env:
    ./scripts/check-env.sh

# Run all tests
test:
    pytest

# Run smoke tests (quick validation)
smoke:
    ./scripts/smoke-test.sh

# Safety & Recovery (Phase 2)
rollback:
    ./scripts/rollback-dev.sh

verify-stable:
    ./scripts/verify-stable.sh

# Run pre-merge validation (lint + test + coverage ≥85%)
# Required before creating pull request (~2 minutes)
pre-merge:
    ./scripts/pre-merge.sh

# Version Management (Phase 3)
bump-major:
    ./scripts/bump-version.sh major

bump-minor:
    ./scripts/bump-version.sh minor

bump-patch:
    ./scripts/bump-version.sh patch

prepare-release TYPE:
    ./scripts/prepare-release.sh {{TYPE}}

# Run tests with coverage
test-coverage:
    pytest --cov={{ package_name }} --cov-report=html --cov-report=term

# Run linting (ruff)
lint:
    ruff check src/{{ package_name }} tests

# Run linting with auto-fix
lint-fix:
    ruff check --fix src/{{ package_name }} tests

# Run code formatting (black)
format:
    black src/{{ package_name }} tests

# Run type checking (mypy)
typecheck:
    mypy src/{{ package_name }}

# Run all quality checks (lint + typecheck + format check)
check: lint typecheck
    black --check src/{{ package_name }} tests

# Run pre-commit on all files
pre-commit:
    pre-commit run --all-files

# Start the gateway server
run:
    {{ project_slug }}

# Start the gateway with debug logging
run-debug:
    MCP_N8N_LOG_LEVEL=DEBUG MCP_N8N_DEBUG=1 {{ project_slug }}

# Clean build artifacts
clean:
    rm -rf build/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf .ruff_cache/
    rm -rf htmlcov/
    find . -type d -name __pycache__ -exec rm -rf {} +

# Full setup (install + hooks + check)
setup: install setup-hooks
    @echo "✓ Setup complete! Run 'just test' to verify."

# Pre-push checks (run before committing)
verify: pre-commit smoke test
    @echo "✓ All checks passed!"

# Build & Release (Phase 3)
# Build distribution packages (wheel + sdist)
# Output: dist/*.whl and dist/*.tar.gz
build:
    ./scripts/build-dist.sh

# Publish to TestPyPI (for testing before production release)
publish-test:
    ./scripts/publish-test.sh

# Publish to production PyPI
publish-prod:
    ./scripts/publish-prod.sh

release TYPE:
    @echo "Starting full release workflow for {{TYPE}} version..."
    just prepare-release {{TYPE}}
    just build
    @echo ""
    @echo "Build complete. Test on TestPyPI first:"
    @echo "  just publish-test"
    @echo ""
    @echo "After verifying, publish to production:"
    @echo "  just publish-prod"

# Developer Tools (Phase 4)
diagnose:
    ./scripts/diagnose.sh

dev-server:
    ./scripts/dev-server.sh

docs:
    @echo "Opening documentation..."
    @echo ""
    @echo "Available documentation:"
    @echo "  - README.md - Project overview"
    @echo "  - CONTRIBUTING.md - Contribution guidelines"
    @echo "  - ARCHITECTURE.md - System architecture"
    @echo "  - docs/DEVELOPMENT.md - Developer guide"
    @echo "  - docs/TROUBLESHOOTING.md - Problem solving"
    @echo "  - docs/RELEASE_CHECKLIST.md - Release process"

{% if include_docker -%}
# === Docker Commands ===

# Build production Docker image
docker-build:
    @echo "Building production Docker image..."
    docker build -t {{ project_slug }}:latest .

# Build test Docker image (for CI)
docker-build-test:
    @echo "Building test Docker image..."
    docker build -t {{ project_slug }}:test -f Dockerfile.test .

# Run tests in Docker container (isolated environment)
docker-test:
    @echo "Running tests in Docker container..."
    docker run --rm {{ project_slug }}:test

{% if docker_strategy == 'production' -%}
# Run production container
docker-run:
    @echo "Starting {{ project_slug }} container..."
{% if project_type == 'mcp_server' -%}
    docker run -d --name {{ project_slug }} \
        -v $(pwd)/logs:/app/logs \
        -v $(pwd)/.env:/app/.env:ro \
        {{ project_slug }}:latest
{% elif project_type == 'web_service' -%}
    docker run -d --name {{ project_slug }} \
        -p 8000:8000 \
        -v $(pwd)/.env:/app/.env:ro \
        {{ project_slug }}:latest
{% else -%}
    docker run -it --rm {{ project_slug }}:latest
{% endif -%}

# Start all services with docker-compose
docker-compose-up:
    @echo "Starting services with docker-compose..."
    docker-compose up -d

# Stop all services
docker-compose-down:
    @echo "Stopping services..."
    docker-compose down

# View logs from docker-compose services
docker-logs:
    docker-compose logs -f {{ project_slug }}

# Rebuild and restart services
docker-rebuild:
    @echo "Rebuilding and restarting services..."
    docker-compose up -d --build

{% endif -%}
# Stop and remove Docker container
docker-stop:
    @echo "Stopping {{ project_slug }} container..."
    docker stop {{ project_slug }} || true
    docker rm {{ project_slug }} || true

# Remove Docker images
docker-clean:
    @echo "Removing Docker images..."
    docker rmi {{ project_slug }}:latest {{ project_slug }}:test || true

# Full Docker cleanup (containers + images + volumes)
docker-clean-all:
    @echo "Cleaning up all Docker artifacts..."
{% if docker_strategy == 'production' -%}
    docker-compose down -v || true
{% endif -%}
    docker stop {{ project_slug }} || true
    docker rm {{ project_slug }} || true
    docker rmi {{ project_slug }}:latest {{ project_slug }}:test || true

{% endif -%}
# Show environment info
info:
    @echo "Python version:"
    @python --version
    @echo ""
    @echo "Package info:"
    @pip show {{ project_slug }} || echo "Package not installed"
    @echo ""
    @echo "Environment variables:"
    @env | grep {{ package_name | upper }} || echo "No {{ package_name | upper }}_* variables set"
