[project]
name = "mcp-orchestration"
version = "0.1.0"
description = "MCP server orchestration and management tools"
authors = [
    {name = "Victor Piper", email = "victor@liminalcommons.org"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
dependencies = [
"fastmcp>=0.3.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
"click>=8.0.0",
]

[project.optional-dependencies]
dev = [
"pytest==8.3.0",
    "pytest-asyncio==0.24.0",
    "pytest-cov==6.0.0",
"mypy==1.11.0",
    "ruff==0.7.0",
    "black==24.10.0",
    "pre-commit==4.0.1",
]
release = [
    "build==1.0.3",
    "twine==4.0.2",
]

[project.scripts]
mcp-orchestration = "mcp_orchestration.mcp.server:main"
mcp-orchestration-memory = "mcp_orchestration.cli.main:cli"
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_orchestration"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = ["temp/"]

# Allow missing imports for third-party libraries without stubs
[[tool.mypy.overrides]]
module = ["fastmcp", "fastmcp.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pytest", "pytest.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pydantic", "pydantic.*", "pydantic_settings"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["click", "click.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.coverage.run]
source = ["src/mcp_orchestration"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/temp/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 85.0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mcp_orchestration.logging]
format = "json"              # json or text
level = "INFO"               # DEBUG, INFO, WARNING, ERROR, CRITICAL
file = "logs/mcp-orchestration.log"    # Log file path
max_bytes = 10485760         # 10MB max file size
backup_count = 5             # Keep 5 rotated log files
retention_days = 30          # Delete logs older than 30 days
