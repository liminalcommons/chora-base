"""Error formatting utilities for user-friendly error messages.

This module provides utilities to generate helpful error messages with:
- Fuzzy matching suggestions for typos
- Lists of available alternatives
- Clear, actionable guidance

Use cases:
- CLI tools: Suggest correct commands/flags
- APIs: Suggest valid endpoints/parameters
- Config validation: Suggest corrections
- Database queries: Suggest similar records
- MCP servers: Suggest valid tool/resource names

Generated by chora-base template.
"""

from difflib import get_close_matches
from typing import Any


class ErrorFormatter:
    """User-friendly error message formatting with suggestions.

    Provides static methods to format common error types with helpful context:
    - not_found: Entity not found, with fuzzy match suggestions
    - already_exists: Entity already exists
    - invalid_parameter: Parameter validation errors

    Examples:
        Not found with suggestion:

            >>> ErrorFormatter.not_found(
            ...     entity_type="server",
            ...     entity_id="githbu",
            ...     available=["github", "gitlab", "gitea"],
            ... )
            "Server 'githbu' not found. Did you mean 'github'?"

        Already exists:

            >>> ErrorFormatter.already_exists(
            ...     entity_type="server",
            ...     entity_id="production",
            ... )
            "Server 'production' already exists."

        Invalid parameter:

            >>> ErrorFormatter.invalid_parameter(
            ...     param_name="port",
            ...     value="not-a-number",
            ...     expected="integer",
            ... )
            "Invalid parameter 'port': got str, expected integer"
    """

    @staticmethod
    def not_found(
        entity_type: str,
        entity_id: str,
        available: list[str],
        max_suggestions: int = 3,
    ) -> str:
        """Format 'not found' error with fuzzy match suggestions.

        Uses difflib.get_close_matches to find similar entity IDs and suggests them.
        If no close matches found, lists first 5 available entities.

        Args:
            entity_type: Type of entity (e.g., 'server', 'command', 'resource').
                Will be capitalized in the message.
            entity_id: ID/name that wasn't found.
            available: List of valid/available entity IDs for suggestions.
                Can be empty list if none available.
            max_suggestions: Maximum number of suggestions to show (default: 3).
                Uses fuzzy matching cutoff of 0.6 similarity.

        Returns:
            Formatted error message string with:
            - Base "not found" message
            - Fuzzy match suggestions (if any found)
            - Or list of available entities (if no fuzzy match)

        Examples:
            Single suggestion (close match):

                >>> ErrorFormatter.not_found(
                ...     entity_type="command",
                ...     entity_id="buld",
                ...     available=["build", "test", "lint"],
                ... )
                "Command 'buld' not found. Did you mean 'build'?"

            Multiple suggestions:

                >>> ErrorFormatter.not_found(
                ...     entity_type="server",
                ...     entity_id="prod",
                ...     available=["production", "prod-eu", "prod-us", "dev"],
                ...     max_suggestions=2,
                ... )
                "Server 'prod' not found. Did you mean one of: 'production', 'prod-eu'?"

            No close match, list available:

                >>> ErrorFormatter.not_found(
                ...     entity_type="tool",
                ...     entity_id="xyz",
                ...     available=["add", "remove", "list"],
                ... )
                "Tool 'xyz' not found. Available tools: add, remove, list"

            Many available (truncated):

                >>> ErrorFormatter.not_found(
                ...     entity_type="resource",
                ...     entity_id="unknown",
                ...     available=["a", "b", "c", "d", "e", "f", "g"],
                ... )
                "Resource 'unknown' not found. Available resources: a, b, c, d, e (and 2 more)"

            No available entities:

                >>> ErrorFormatter.not_found(
                ...     entity_type="item",
                ...     entity_id="test",
                ...     available=[],
                ... )
                "Item 'test' not found."
        """
        # Base message
        message = f"{entity_type.capitalize()} '{entity_id}' not found."

        if not available:
            # No suggestions possible
            return message

        # Try fuzzy matching for typos (cutoff=0.6 means 60% similarity)
        suggestions = get_close_matches(
            entity_id,
            available,
            n=max_suggestions,
            cutoff=0.6,
        )

        if suggestions:
            # Found close matches - suggest them
            if len(suggestions) == 1:
                message += f" Did you mean '{suggestions[0]}'?"
            else:
                suggestion_list = "', '".join(suggestions)
                message += f" Did you mean one of: '{suggestion_list}'?"
        else:
            # No close matches - list available (first 5)
            shown = available[:5]
            message += f" Available {entity_type}s: {', '.join(shown)}"
            if len(available) > 5:
                remaining = len(available) - 5
                message += f" (and {remaining} more)"

        return message

    @staticmethod
    def already_exists(
        entity_type: str,
        entity_id: str,
        existing_id: str | None = None,
    ) -> str:
        """Format 'already exists' error message.

        Args:
            entity_type: Type of entity (e.g., 'server', 'user', 'file').
                Will be capitalized in the message.
            entity_id: ID/name that already exists.
            existing_id: Optional reference to existing entity ID.
                Use when the provided ID maps to an existing entity with different ID.

        Returns:
            Formatted error message string.

        Examples:
            Basic already exists:

                >>> ErrorFormatter.already_exists(
                ...     entity_type="server",
                ...     entity_id="production",
                ... )
                "Server 'production' already exists."

            With existing ID reference:

                >>> ErrorFormatter.already_exists(
                ...     entity_type="user",
                ...     entity_id="alice",
                ...     existing_id="user_123",
                ... )
                "User 'alice' already exists (ID: user_123)."
        """
        message = f"{entity_type.capitalize()} '{entity_id}' already exists"

        if existing_id:
            message += f" (ID: {existing_id})"

        message += "."
        return message

    @staticmethod
    def invalid_parameter(
        param_name: str,
        value: Any,
        expected: str,
        hint: str | None = None,
    ) -> str:
        """Format 'invalid parameter' error message.

        Args:
            param_name: Name of the invalid parameter.
            value: The invalid value that was provided.
            expected: Description of expected value/type.
                Examples: "integer", "one of: ['a', 'b', 'c']", "dict with 'name' field"
            hint: Optional hint for how to fix the error.

        Returns:
            Formatted error message string.

        Examples:
            Type mismatch:

                >>> ErrorFormatter.invalid_parameter(
                ...     param_name="port",
                ...     value="8080",
                ...     expected="integer",
                ... )
                "Invalid parameter 'port': got str, expected integer"

            With hint:

                >>> ErrorFormatter.invalid_parameter(
                ...     param_name="mode",
                ...     value="fast",
                ...     expected="one of: ['slow', 'medium']",
                ...     hint="use 'medium' for better compatibility",
                ... )
                "Invalid parameter 'mode': got str, expected one of: ['slow', 'medium']. Hint: use 'medium' for better compatibility"

            Complex validation:

                >>> ErrorFormatter.invalid_parameter(
                ...     param_name="config",
                ...     value={"name": "test"},
                ...     expected="dict with 'name' and 'version' fields",
                ... )
                "Invalid parameter 'config': got dict, expected dict with 'name' and 'version' fields"
        """
        message = (
            f"Invalid parameter '{param_name}': "
            f"got {type(value).__name__}, expected {expected}"
        )

        if hint:
            message += f". Hint: {hint}"

        return message

    @staticmethod
    def missing_required_field(
        field_name: str,
        container: str = "request",
    ) -> str:
        """Format 'missing required field' error message.

        Args:
            field_name: Name of the missing field.
            container: Where the field should be (default: "request").
                Examples: "request body", "configuration", "parameters"

        Returns:
            Formatted error message string.

        Examples:
            Basic missing field:

                >>> ErrorFormatter.missing_required_field(
                ...     field_name="name",
                ... )
                "Missing required field 'name' in request"

            Custom container:

                >>> ErrorFormatter.missing_required_field(
                ...     field_name="api_key",
                ...     container="configuration",
                ... )
                "Missing required field 'api_key' in configuration"
        """
        return f"Missing required field '{field_name}' in {container}"

    @staticmethod
    def invalid_combination(
        field1: str,
        field2: str,
        reason: str,
    ) -> str:
        """Format 'invalid combination' error for conflicting parameters.

        Args:
            field1: First conflicting field name.
            field2: Second conflicting field name.
            reason: Why the combination is invalid.

        Returns:
            Formatted error message string.

        Examples:
            Conflicting parameters:

                >>> ErrorFormatter.invalid_combination(
                ...     field1="use_cache",
                ...     field2="force_refresh",
                ...     reason="cannot use cache while forcing refresh",
                ... )
                "Invalid combination of 'use_cache' and 'force_refresh': cannot use cache while forcing refresh"

            Mutual exclusivity:

                >>> ErrorFormatter.invalid_combination(
                ...     field1="all",
                ...     field2="ids",
                ...     reason="specify either 'all' or specific IDs, not both",
                ... )
                "Invalid combination of 'all' and 'ids': specify either 'all' or specific IDs, not both"
        """
        return f"Invalid combination of '{field1}' and '{field2}': {reason}"


__all__ = ["ErrorFormatter"]
