"""Tests for response builder utilities.

Test Coverage:
- Response.success() - 6 tests
- Response.error() - 6 tests
- Response.partial() - 5 tests
- Response structure validation - 3 tests

Total: 20 test cases

Generated by chora-base template.
"""

{% raw -%}
import pytest
import time
from {{ package_name }}.utils.responses import Response


class TestResponseSuccess:
    """Tests for Response.success() method."""

    def test_success_basic(self):
        """Test basic success response with action only."""
        result = Response.success(action="created")

        assert result["status"] == "success"
        assert result["action"] == "created"
        assert result["data"] is None
        assert result["metadata"] == {}
        assert "timestamp" in result
        assert isinstance(result["timestamp"], float)

    def test_success_with_data(self):
        """Test success response with data."""
        data = {"id": 123, "name": "test"}
        result = Response.success(action="retrieved", data=data)

        assert result["status"] == "success"
        assert result["action"] == "retrieved"
        assert result["data"] == data
        assert result["data"]["id"] == 123
        assert result["data"]["name"] == "test"

    def test_success_with_metadata(self):
        """Test success response with metadata."""
        result = Response.success(
            action="listed",
            data=[1, 2, 3],
            count=3,
            total=100,
            page=1,
        )

        assert result["status"] == "success"
        assert result["metadata"]["count"] == 3
        assert result["metadata"]["total"] == 100
        assert result["metadata"]["page"] == 1

    def test_success_with_list_data(self):
        """Test success response with list data."""
        items = [{"id": 1}, {"id": 2}, {"id": 3}]
        result = Response.success(
            action="listed",
            data=items,
            count=len(items),
        )

        assert result["data"] == items
        assert len(result["data"]) == 3
        assert result["metadata"]["count"] == 3

    def test_success_with_string_data(self):
        """Test success response with string data."""
        result = Response.success(
            action="generated",
            data="some string output",
        )

        assert result["data"] == "some string output"
        assert isinstance(result["data"], str)

    def test_success_timestamp_accuracy(self):
        """Test that timestamp is current."""
        before = time.time()
        result = Response.success(action="tested")
        after = time.time()

        assert before <= result["timestamp"] <= after


class TestResponseError:
    """Tests for Response.error() method."""

    def test_error_basic(self):
        """Test basic error response."""
        result = Response.error(
            error_code="not_found",
            message="Resource not found",
        )

        assert result["status"] == "error"
        assert result["error_code"] == "not_found"
        assert result["message"] == "Resource not found"
        assert result["recoverable"] is True  # Default
        assert result["details"] == {}
        assert "timestamp" in result

    def test_error_with_details(self):
        """Test error response with details."""
        result = Response.error(
            error_code="invalid_parameter",
            message="Invalid server ID",
            available=["prod", "dev", "staging"],
            field="server_id",
        )

        assert result["error_code"] == "invalid_parameter"
        assert result["details"]["available"] == ["prod", "dev", "staging"]
        assert result["details"]["field"] == "server_id"

    def test_error_unrecoverable(self):
        """Test fatal/unrecoverable error."""
        result = Response.error(
            error_code="auth_failed",
            message="Authentication failed",
            recoverable=False,
        )

        assert result["recoverable"] is False
        assert result["error_code"] == "auth_failed"

    def test_error_with_suggestion(self):
        """Test error with suggestion in message."""
        result = Response.error(
            error_code="not_found",
            message="Server 'tset' not found. Did you mean 'test'?",
            available=["test", "prod"],
        )

        assert "Did you mean" in result["message"]
        assert result["details"]["available"] == ["test", "prod"]

    def test_error_recoverable_default(self):
        """Test that recoverable defaults to True."""
        result = Response.error(
            error_code="temporary_failure",
            message="Temporary failure, retry",
        )

        assert result["recoverable"] is True

    def test_error_timestamp_accuracy(self):
        """Test that error timestamp is current."""
        before = time.time()
        result = Response.error(
            error_code="test_error",
            message="Test error",
        )
        after = time.time()

        assert before <= result["timestamp"] <= after


class TestResponsePartial:
    """Tests for Response.partial() method."""

    def test_partial_basic(self):
        """Test basic partial success response."""
        result = Response.partial(
            action="deleted",
            succeeded=["item1", "item2"],
            failed=[{"id": "item3", "reason": "not found"}],
        )

        assert result["status"] == "partial"
        assert result["action"] == "deleted"
        assert result["succeeded"] == ["item1", "item2"]
        assert len(result["failed"]) == 1
        assert result["failed"][0]["id"] == "item3"
        assert "timestamp" in result

    def test_partial_counts_auto_calculated(self):
        """Test that succeeded/failed counts are auto-calculated."""
        result = Response.partial(
            action="imported",
            succeeded=[1, 2, 3],
            failed=[{"id": 4, "error": "invalid"}],
        )

        assert result["metadata"]["succeeded_count"] == 3
        assert result["metadata"]["failed_count"] == 1

    def test_partial_with_metadata(self):
        """Test partial response with additional metadata."""
        result = Response.partial(
            action="processed",
            succeeded=["a", "b"],
            failed=[{"id": "c", "reason": "error"}],
            total_attempted=3,
            duration_ms=250,
        )

        assert result["metadata"]["succeeded_count"] == 2
        assert result["metadata"]["failed_count"] == 1
        assert result["metadata"]["total_attempted"] == 3
        assert result["metadata"]["duration_ms"] == 250

    def test_partial_all_succeeded(self):
        """Test partial response when all succeeded (edge case)."""
        result = Response.partial(
            action="validated",
            succeeded=["item1", "item2", "item3"],
            failed=[],
        )

        assert result["metadata"]["succeeded_count"] == 3
        assert result["metadata"]["failed_count"] == 0
        assert result["failed"] == []

    def test_partial_all_failed(self):
        """Test partial response when all failed (edge case)."""
        result = Response.partial(
            action="created",
            succeeded=[],
            failed=[
                {"id": "item1", "reason": "exists"},
                {"id": "item2", "reason": "invalid"},
            ],
        )

        assert result["metadata"]["succeeded_count"] == 0
        assert result["metadata"]["failed_count"] == 2
        assert result["succeeded"] == []


class TestResponseStructure:
    """Tests for response structure consistency."""

    def test_all_responses_have_status(self):
        """Test that all response types have status field."""
        success = Response.success(action="test")
        error = Response.error(error_code="test", message="test")
        partial = Response.partial(action="test", succeeded=[], failed=[])

        assert "status" in success
        assert "status" in error
        assert "status" in partial

    def test_all_responses_have_timestamp(self):
        """Test that all response types have timestamp field."""
        success = Response.success(action="test")
        error = Response.error(error_code="test", message="test")
        partial = Response.partial(action="test", succeeded=[], failed=[])

        assert "timestamp" in success
        assert "timestamp" in error
        assert "timestamp" in partial
        assert isinstance(success["timestamp"], float)
        assert isinstance(error["timestamp"], float)
        assert isinstance(partial["timestamp"], float)

    def test_status_values_are_correct(self):
        """Test that status values are the expected strings."""
        success = Response.success(action="test")
        error = Response.error(error_code="test", message="test")
        partial = Response.partial(action="test", succeeded=[], failed=[])

        assert success["status"] == "success"
        assert error["status"] == "error"
        assert partial["status"] == "partial"


class TestResponseIntegration:
    """Integration tests for realistic use cases."""

    def test_api_endpoint_success_flow(self):
        """Test typical REST API success response."""
        # Simulate creating a resource
        created_resource = {"id": 123, "name": "test", "status": "active"}

        result = Response.success(
            action="created",
            data=created_resource,
            resource_type="server",
        )

        assert result["status"] == "success"
        assert result["data"]["id"] == 123
        assert result["metadata"]["resource_type"] == "server"

    def test_api_endpoint_error_flow(self):
        """Test typical REST API error response."""
        result = Response.error(
            error_code="already_exists",
            message="Server 'test' already exists",
            existing_id=123,
            recoverable=True,
        )

        assert result["status"] == "error"
        assert result["error_code"] == "already_exists"
        assert result["details"]["existing_id"] == 123
        assert result["recoverable"] is True

    def test_batch_operation_flow(self):
        """Test batch operation with partial success."""
        # Simulate batch deletion
        result = Response.partial(
            action="deleted",
            succeeded=["server1", "server2"],
            failed=[
                {"id": "server3", "reason": "not found"},
                {"id": "server4", "reason": "in use"},
            ],
            total_requested=4,
        )

        assert result["status"] == "partial"
        assert result["metadata"]["succeeded_count"] == 2
        assert result["metadata"]["failed_count"] == 2
        assert result["metadata"]["total_requested"] == 4

    def test_cli_command_output(self):
        """Test CLI command structured output."""
        # Simulate CLI list command
        items = [
            {"id": "1", "name": "item1"},
            {"id": "2", "name": "item2"},
        ]

        result = Response.success(
            action="listed",
            data=items,
            count=len(items),
            total=10,
            page=1,
            per_page=2,
        )

        assert result["data"] == items
        assert result["metadata"]["count"] == 2
        assert result["metadata"]["total"] == 10
        assert result["metadata"]["page"] == 1

    def test_mcp_tool_response(self):
        """Test MCP tool response format."""
        # Simulate MCP server tool success
        result = Response.success(
            action="server_added",
            data={
                "server_id": "github",
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
            },
            config_updated=True,
        )

        assert result["status"] == "success"
        assert result["data"]["server_id"] == "github"
        assert result["metadata"]["config_updated"] is True
{%- endraw %}
