# chora-base: Python Project Template
# Based on mcp-n8n Phase 4.5/4.6 - LLM-Intelligent Developer Experience
# https://github.com/liminalcommons/mcp-n8n

_min_copier_version: "9.0.0"
_templates_suffix: .jinja

# Jinja2 Environment Configuration
# Use angle bracket delimiters to avoid conflicts with both:
# - Python's {} syntax (dictionaries, .format(), f-strings, sets)
# - Markdown's [] syntax (links, lists, references)
# - Regex character classes [a-z][0-9]
_envops:
  block_start_string: "<%"
  block_end_string: "%>"
  variable_start_string: "<<"
  variable_end_string: ">>"
  comment_start_string: "<#"
  comment_end_string: "#>"

  # Whitespace control for clean output
  trim_blocks: true
  keep_trailing_newline: true
  lstrip_blocks: true

# === Project Metadata ===

project_name:
  type: str
  help: What is your project name?
  default: my-chora-project
  validator: >-
    [% if not (project_name | regex_search('^[a-z][a-z0-9\-]+$')) %]
    Must start with lowercase letter, followed by letters, digits, or dashes
    [% endif %]

project_slug:
  type: str
  help: Project slug (for directory names, URLs)
  default: "[[ project_name | lower | replace(' ', '-') | replace('_', '-') ]]"

package_name:
  type: str
  help: Python package name (must be valid Python identifier)
  default: "[[ project_slug | replace('-', '_') ]]"
  validator: >-
    [% if not (package_name | regex_search('^[a-z][a-z0-9_]+$')) %]
    Must be valid Python identifier (lowercase letters, digits, underscores)
    [% endif %]

project_description:
  type: str
  help: Short description of your project
  default: A Python project built with chora-base template

project_version:
  type: str
  help: Initial version number
  default: "0.1.0"
  validator: >-
    [% if not (project_version | regex_search('^\d+\.\d+\.\d+$')) %]
    Must be semantic version (e.g., 0.1.0)
    [% endif %]

# === Author Information ===

author_name:
  type: str
  help: Author name for project metadata
  default: Your Name

author_email:
  type: str
  help: Author email for project metadata
  default: your.email@example.com
  validator: >-
    [% if not (author_email | regex_search('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')) %]
    Must be valid email address
    [% endif %]

github_username:
  type: str
  help: GitHub username or organization
  default: liminalcommons

security_email:
  type: str
  help: Email for security vulnerability reports
  default: "[[ author_email ]]"
  validator: >-
    [% if not (security_email | regex_search('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')) %]
    Must be valid email address
    [% endif %]

# === Python Configuration ===

python_version:
  type: str
  help: Minimum Python version to target
  choices:
    - "3.11"
    - "3.12"
    - "3.13"
  default: "3.11"

# === Project Type & Features ===

project_type:
  type: str
  help: What type of project is this?
  choices:
    - mcp_server
    - library
    - cli_tool
    - web_service
  default: mcp_server

include_cli:
  type: bool
  help: Include CLI interface (chora-memory or custom)?
  default: true

cli_framework:
  type: str
  help: Which CLI framework?
  choices:
    - click
    - typer
  default: click
  when: "[[ include_cli ]]"

# === Chora Ecosystem Features ===

include_memory_system:
  type: bool
  help: Include Agent Memory System (.chora/memory/)? [Event log, knowledge graph, trace context]
  default: true

include_agents_md:
  type: bool
  help: Include AGENTS.md (machine-readable instructions for AI agents)?
  default: true

include_vision_docs:
  type: bool
  help: Include vision document templates and strategic design guidance?
  default: true
  when: "[[ include_agents_md ]]"

include_roadmap:
  type: bool
  help: Include ROADMAP.md template?
  default: true

initial_version:
  type: str
  help: Initial project version (semver)
  default: "0.1.0"
  validator: >-
    [% if not (initial_version | regex_search('^\d+\.\d+\.\d+$')) %]
    Must be semantic version (e.g., 0.1.0)
    [% endif %]
  when: "[[ include_roadmap ]]"

# === Testing & Quality ===

include_tests:
  type: bool
  help: Include testing infrastructure?
  default: true

test_coverage_threshold:
  type: int
  help: Minimum test coverage percentage
  default: 85
  validator: >-
    [% if test_coverage_threshold < 0 or test_coverage_threshold > 100 %]
    Must be between 0 and 100
    [% endif %]
  when: "[[ include_tests ]]"

include_pre_commit:
  type: bool
  help: Include pre-commit hooks (ruff, black, mypy)?
  default: true

include_github_actions:
  type: bool
  help: Include GitHub Actions CI/CD workflows?
  default: true

# === PyPI Publishing Configuration ===

pypi_auth_method:
  type: str
  help: "PyPI authentication: token (simpler, local scripts) or trusted_publishing (more secure, GitHub only)"
  choices:
    - token
    - trusted_publishing
  default: token
  when: "[[ include_github_actions ]]"

# === Documentation ===

include_contributing:
  type: bool
  help: Include CONTRIBUTING.md?
  default: true

include_development_docs:
  type: bool
  help: Include DEVELOPMENT.md (developer deep dive)?
  default: true

include_troubleshooting:
  type: bool
  help: Include TROUBLESHOOTING.md?
  default: true

include_documentation_standard:
  type: bool
  help: Include DOCUMENTATION_STANDARD.md and doc automation scripts?
  default: true

documentation_advanced_features:
  type: bool
  help: Enable advanced doc features (metrics, query tool, test extraction enhancements)?
  default: false
  when: "[[ include_documentation_standard ]]"

# === License ===

license:
  type: str
  help: Project license
  choices:
    - MIT
    - Apache-2.0
    - GPL-3.0
    - BSD-3-Clause
    - Proprietary
  default: MIT

# === Development Tools ===

include_justfile:
  type: bool
  help: Include justfile for task automation?
  default: true

include_docker:
  type: bool
  help: Include Docker configuration (Dockerfile, docker-compose.yml)?
  default: false

docker_strategy:
  type: str
  help: "Docker deployment strategy?"
  choices:
    - production  # Multi-stage production build + docker-compose
    - ci-only     # Just Dockerfile.test for CI (no production deployment)
  default: production
  when: "[[ include_docker ]]"

# === MCP Namespace Configuration (v1.8.0) ===

mcp_namespace:
  type: str
  help: "MCP namespace for tools/resources (e.g., 'myproject' â†’ myproject:tool_name)"
  default: "[[ project_slug | replace('-', '') ]]"
  validator: >-
    [% if not (mcp_namespace | regex_search('^[a-z][a-z0-9]{2,19}$')) %]
    Must be lowercase, 3-20 chars, alphanumeric only (no hyphens/underscores)
    [% endif %]
  when: "[[ project_type == 'mcp_server' ]]"

mcp_enable_namespacing:
  type: bool
  help: "Prefix tools with namespace? Recommended for ecosystem integration (myproject:tool_name)"
  default: true
  when: "[[ project_type == 'mcp_server' ]]"

mcp_resource_uri_scheme:
  type: bool
  help: "Generate resource URI helpers? (myproject://type/id)"
  default: true
  when: "[[ project_type == 'mcp_server' ]]"

mcp_validate_names:
  type: bool
  help: "Include runtime namespace validation and pre-commit hooks?"
  default: true
  when: "[[ project_type == 'mcp_server' and mcp_enable_namespacing ]]"

# === Computed Values (not questions) ===

_templates_suffix: ".jinja"

_exclude:
  - "[% if not include_vision_docs %]dev-docs/vision/[% endif %]"
  - "[% if not include_roadmap %]ROADMAP.md.jinja[% endif %]"
  - "[% if not include_vision_docs %]dev-docs/vision/*[% endif %]"
  - "[% if not include_documentation_standard %]DOCUMENTATION_STANDARD.md.jinja[% endif %]"
  - "[% if not include_documentation_standard %]user-docs/[% endif %]"
  - "[% if not include_documentation_standard %]project-docs/[% endif %]"
  - "[% if not include_documentation_standard %]scripts/validate_docs.py.jinja[% endif %]"
  - "[% if not include_documentation_standard %]scripts/generate_docs_map.py.jinja[% endif %]"
  - "[% if not include_documentation_standard %]scripts/extract_tests.py.jinja[% endif %]"
  - "[% if not documentation_advanced_features %]scripts/docs_metrics.py.jinja[% endif %]"
  - "[% if not documentation_advanced_features %]scripts/query_docs.py.jinja[% endif %]"
  - "[% if project_type != 'mcp_server' %]src/[[package_name]]/mcp/[% endif %]"
  - "[% if project_type != 'mcp_server' %]NAMESPACES.md.jinja[% endif %]"
  - "[% if project_type != 'mcp_server' %]scripts/validate_mcp_names.py.jinja[% endif %]"
  - "[% if project_type != 'mcp_server' %]scripts/migrate_namespace.sh.jinja[% endif %]"
  - "[% if not mcp_validate_names %]scripts/validate_mcp_names.py.jinja[% endif %]"
  - "[% if not mcp_validate_names %]scripts/migrate_namespace.sh.jinja[% endif %]"
  - "[% if not include_docker %]Dockerfile.jinja[% endif %]"
  - "[% if not include_docker %]Dockerfile.test.jinja[% endif %]"
  - "[% if not include_docker %].dockerignore.jinja[% endif %]"
  - "[% if not include_docker %]docker-compose.yml.jinja[% endif %]"
  - "[% if not include_docker %]DOCKER_BEST_PRACTICES.md.jinja[% endif %]"
  - "[% if include_docker and docker_strategy == 'ci-only' %]Dockerfile.jinja[% endif %]"
  - "[% if include_docker and docker_strategy == 'ci-only' %]docker-compose.yml.jinja[% endif %]"
  # v2.0.0: Nested AGENTS.md files (exclude if feature not enabled)
  - "[% if not include_tests %]tests/AGENTS.md.jinja[% endif %]"
  - "[% if not include_memory_system %].chora/memory/AGENTS.md.jinja[% endif %]"
  - "[% if not include_docker %]docker/AGENTS.md.jinja[% endif %]"

_skip_if_exists:
  - .env
  - .chora/memory/events/**
  - .chora/memory/knowledge/**
  - .chora/memory/profiles/**

_tasks:
  - "[% if include_pre_commit %]echo 'Run: pre-commit install'[% endif %]"
  - "[% if include_justfile %]echo 'Run: just --list to see available commands'[% endif %]"
  - echo "Setup complete! Run './scripts/setup.sh' to install dependencies"
